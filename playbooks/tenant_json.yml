---
- hosts: localhost
  gather_facts: no
  vars:
    # VPC,Subnet,Secgroup,ECS,EIP
    tenant_json: "vars/tenant.json"
    tenant_cf: "{{ lookup('file', tenant_json) | from_json }}"
    image_name: "{{ tenant_cf['vms'][ecs_name]['image_name'] | default(tenant_cf['default']['image_name']) }}"
    availability_zone: "{{ tenant_cf['vms'][ecs_name]['availability_zone'] | default(tenant_cf['default']['availability_zone']) }}"
    vpc_name: "{{ tenant_cf['vms'][ecs_name]['vpc_name'] }}"
    vpc_net: "{{ tenant_cf['vms'][ecs_name]['vpc_net'] }}"
    subnet_name: "{{ tenant_cf['vms'][ecs_name]['subnet_name'] | default(tenant_cf['default']['subnet_name']) }}"
    subnet_net: "{{ tenant_cf['vms'][ecs_name]['subnet_net'] | default(tenant_cf['default']['subnet_net']) }}"
    subnet_gateway: "{{ tenant_cf['vms'][ecs_name]['subnet_gateway'] | default(tenant_cf['default']['subnet_gateway']) }}"
    subnet_dhcp_enable: "{{ tenant_cf['vms'][ecs_name]['subnet_dhcp_enable'] | default(tenant_cf['default']['subnet_dhcp_enable']) }}"
    subnet_primary_dns: "{{ tenant_cf['vms'][ecs_name]['subnet_primary_dns'] | default(tenant_cf['default']['subnet_primary_dns']) }}"
    subnet_secondary_dns: "{{ tenant_cf['vms'][ecs_name]['subnet_secondary_dns'] | default(tenant_cf['default']['subnet_secondary_dns']) }}"
    secgroups: "{{ tenant_cf['vms'][ecs_name]['secgroups'] | default(tenant_cf['default']['secgroups']) }}"
    secgrouprules: "{{ tenant_cf['securitygroups'][secgroup_name] }}"
    ecs_ipaddress: "{{ tenant_cf['vms'][ecs_name]['ecs_ipaddress'] | default(tenant_cf['default']['ecs_ipaddress']) }}"
    public_ip_address: "{{ tenant_cf['vms'][ecs_name]['ecs_publicip'] }}"
    ptr_name: "{{ tenant_cf['vms'][ecs_name]['ecs_publicfqdn'] }}"
    eip_bandwidth_name: "{{ tenant_cf['vms'][ecs_name]['eip_bandwidth_name'] | default(tenant_cf['default']['eip_bandwidth_name']) }}"
    eip_bandwidth_size: "{{ tenant_cf['vms'][ecs_name]['eip_bandwidth_size'] | default(tenant_cf['default']['eip_bandwidth_size']) }}"
    ecs_volumetype: "{{ tenant_cf['vms'][ecs_name]['ecs_volumetype'] | default(tenant_cf['default']['ecs_volumetype']) }}"
    ecs_ram: "{{ tenant_cf['vms'][ecs_name]['ecs_ram'] | default(tenant_cf['default']['ecs_ram']) }}"
    ecs_vcpus: "{{ tenant_cf['vms'][ecs_name]['ecs_vcpus'] | default(tenant_cf['default']['ecs_vcpus']) }}"
    ecs_adminkey: "{{ tenant_cf['vms'][ecs_name]['ecs_adminkey'] | default(tenant_cf['default']['ecs_adminkey']) }}"
    keypair_file: "{{ tenant_cf['vms'][ecs_name]['keypair_file'] | default(tenant_cf['default']['keypair_file']) }}"
    # EVS
    evs_availability_zone: "{{ tenant_cf['volumes'][evs_name]['evs_availability_zone'] | default(tenant_cf['default']['evs_availability_zone']) }}"
    evs_volume_type: "{{ tenant_cf['volumes'][evs_name]['evs_volume_type'] | default(tenant_cf['default']['evs_volume_type']) }}"
    evs_size: "{{ tenant_cf['volumes'][evs_name]['evs_size'] | default(tenant_cf['default']['evs_size']) }}"
    evs_multiattach: "{{ tenant_cf['volumes'][evs_name]['evs_multiattach'] | default(tenant_cf['default']['evs_multiattach']) }}"
    evs_scsi: "{{ tenant_cf['volumes'][evs_name]['evs_scsi'] | default(tenant_cf['default']['evs_scsi']) }}"
    # ELB vars
    admin_state_up: "{{ tenant_cf['elb'][elb_name]['admin_state_up'] | default(tenant_cf['default']['admin_state_up']) }}"
    elb_availability_zone: "{{ tenant_cf['elb'][elb_name]['elb_availability_zone'] | default(tenant_cf['default']['elb_availability_zone']) }}"
    elb_bandwidth: "{{ tenant_cf['elb'][elb_name]['elb_bandwidth'] | default(tenant_cf['default']['elb_bandwith']) }}"
    elb_type: "{{ tenant_cf['elb'][elb_name]['elb_type'] | default(tenant_cf['default']['elb_type']) }}"
    elb_secgroup_name: "{{ tenant_cf['elb'][elb_name]['elb_secgroup_name'] | default(tenant_cf['default']['elb_secgroup_name']) }}"
    elb_subnet_name: "{{ tenant_cf['elb'][elb_name]['elb_subnet_name'] | default(tenant_cf['default']['elb_subnet_name']) }}"
    elb_vpc_name: "{{ tenant_cf['elb'][elb_name]['elb_vpc_name'] | default(tenant_cf['default']['elb_vpc_name']) }}"
    # ELB listener vars
    listener_protocol: "{{ tenant_cf['elblistener'][listener_name]['listener_protocol'] | default(tenant_cf['default']['listener_protocol']) }}"
    listener_port: "{{ tenant_cf['elblistener']listener_name]['listener_port'] | default(tenant_cf['default']['listener_port']) }}"
    listener_backend_protocol: "{{ tenant_cf['elblistener'][listener_name]['listener_backend_protocol'] | default(tenant_cf['default']['listener_backend_protocol']) }}"
    listener_backend_port: "{{ tenant_cf['elblistener'][listener_name]['listener_backend_port'] | default(tenant_cf['default']['listener_backend_port']) }}"
    listener_lb_algorithm: "{{ tenant_cf['elblistener'][listener_name]['listener_lb_algorithm'] | default(tenant_cf['default']['listener_lb_algorithm']) }}"
    listener_certificate_name: "{{ tenant_cf['elblistener'][listener_name]['listener_certificate_name'] | default('') }}"
    listener_tcp_timeout: "{{ tenant_cf['elblistener'][listener_name]['listener_tcp_timeout'] | default('') }}"
    listener_cookie_timeout: "{{ tenant_cf['elblistener'][listener_name]['listener_cookie_timeout'] | default('') }}"
    listener_sticky_session_type: "{{ tenant_cf['elblistener'][listener_name]['listener_sticky_session_type'] | default('') }}"
    listener_session_sticky: "{{ tenant_cf['elblistener'][listener_name]['listener_session_sticky'] | default('') }}"
    # ELB healthcheck vars
    healthcheck_connect_port: "{{ tenant_cf['elblistener'][listener_name]['healthcheck_connect_port'] | default(tenant_cf['default']['healthcheck_connect_port']) }}"
    healthcheck_interval: "{{ tenant_cf['elblistener'][listener_name]['healthcheck_interval'] | default(0) }}"
    healthcheck_protocol: "{{ tenant_cf['elblistener'][listener_name]['healthcheck_protocol'] | default('') }}"
    healthcheck_timeout: "{{ tenant_cf['elblistener'][listener_name]['healthcheck_timeout'] | default(0) }}"
    healthcheck_uri: "{{ tenant_cf['elblistener'][listener_name]['healthcheck_uri'] | default('') }}"
    unhealthy_threshold: "{{ tenant_cf['elblistener'][listener_name]['unhealthy_threshold'] | default(0) }}"
    # ELB backend member vars
    backend_members: "{{ tenant_cf['elblistener'][listener_name]['backend_members'] | default('') }}"
    # DNS
    zone_description: "{{ tenant_cf['dnszones'][zone_name]['zone_description'] | default(tenant_cf['default']['zone_description']) }}"
    zone_type: "{{ tenant_cf['dnszones'][zone_name]['zone_type'] | default(tenant_cf['default']['zone_type']) }}"
    zone_email: "{{ tenant_cf['dnszones'][zone_name]['zone_email'] | default(tenant_cf['default']['zone_email']) }}"
    zone_ttl: "{{ tenant_cf['dnszones'][zone_name]['zone_ttl'] | default(tenant_cf['default']['zone_ttl']) }}"
    zone_records: "{{ tenant_cf['dnszonerecords'][zone_name] }}"
    # RDS
    rds_availability_zone: "{{ tenant_cf['rds'][rds_name][rds_availability_zone] }}"
    rds_vpc_name: "{{ tenant_cf['rds'][rds_name][rds_vpc_name] }}"
    rds_secgroup_name: "{{ tenant_cf['rds'][rds_name][rds_secgroup_name] }}"
    rds_subnet_name: "{{ tenant_cf['rds'][rds_name][rds_subnet_name] }}"
    rds_type: "{{ tenant_cf['rds'][rds_name][rds_type] }}"
    rds_version: "{{ tenant_cf['rds'][rds_name][rds_version] }}"
    rds_root_password: "{{ tenant_cf['rds'][rds_name][rds_root_password] }}"
    rds_port: "{{ tenant_cf['rds'][rds_name][rds_port] }}"
    rds_ram: "{{ tenant_cf['rds'][rds_name][rds_ram] }}"
    rds_volume_type: "{{ tenant_cf['rds'][rds_name][rds_volume_type] }}"
    rds_volume_size: "{{ tenant_cf['rds'][rds_name][rds_volume_size] }}"
    rds_backup_time: "{{ tenant_cf['rds'][rds_name][rds_backup_time] }}"
    rds_backup_days: "{{ tenant_cf['rds'][rds_name][rds_backup_days] }}"
    rds_ha_enabled: "{{ tenant_cf['rds'][rds_name][rds_ha_enabled] }}"
    rds_ha_replication_mode: "{{ tenant_cf['rds'][rds_name][rds_ha_replication_mode] }}"
    # playbook action
    localaction: "create"

  roles:
    # create VM
    - role: "otc_auth"
    - role: "otc_vpc"
    - role: "otc_subnet"
    - role: "otc_secgroup"
    - role: "otc_keypair"
    - role: "otc_eip"
    - role: "otc_ecs"
    - role: "otc_dns"
      localaction: "ptrcreate"
    # create internal DNS zone
    - role: "otc_vpc"
      localaction: "router"
    - role: "otc_dns"
      localaction: "create"
